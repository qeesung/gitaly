# frozen_string_literal: true

require 'net/http'
require 'json'
require 'logger'

@logger = Logger.new($stdout)

LOG_UNREVIEW_ENGINE_URL_UNSET = 'Env. variable UNREVIEW_ENGINE_URL is unset'
LOG_MR_NO_CHANGES = 'MR provides no changes'
LOG_SKIP_RECOMMENDATIONS = 'Skipping UnReview recommendations'
LOG_FAILED_HTTP_REQUEST = 'HTTP request to the UnReview server failed. Response code %d.'

UNREVIEW_MESSAGE = <<~MARKDOWN
  ## UnReview (experimental)

  UnReview is an ML-based code reviewer recommendation system.
  UnReview is currently an early-stage technology and runs in experimental mode.
  If you have any questions or suggestions, feel free to
  [contact us](https://about.gitlab.com/handbook/engineering/development/modelops/appliedml/#how-to-contact-us).
  More information on the UnReview technology can be found on the
  [project page](https://about.gitlab.com/handbook/engineering/development/modelops/appliedml/projects/unreview/).

  UnReview has determined that the individuals below may be good candidates to participate
  in the review based on various factors. After you review all recommendations, please assign reviewers
  manually as this is not done automatically.

  | Reviewer |
  | -------- |
MARKDOWN

UNREVIEW_ENGINE_URL = ENV['UNREVIEW_ENGINE_URL']
UNREVIEW_ENGINE_TOP_N = ENV['UNREVIEW_ENGINE_TOP_N'] || 3
UNREVIEW_ENGINE_VERSION = 'v0.1.0'

MR_PROJECT = project_helper.project_name.freeze
MR_IID = helper.mr_iid.to_i.freeze
MR_CHANGED_FILES = helper.all_changed_files.freeze

def unreview_can_be_run?
  @logger.error LOG_UNREVIEW_ENGINE_URL_UNSET if UNREVIEW_ENGINE_URL.nil?
  @logger.warn LOG_MR_NO_CHANGES if MR_CHANGED_FILES.empty?
  !(UNREVIEW_ENGINE_URL.nil? || MR_CHANGED_FILES.empty?)
end

def query_recommendations(uri, parameters)
  Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
    request = Net::HTTP::Post.new(uri, 'Content-Type' => 'application/json')
    request.body = parameters.to_json
    http.request(request)
  end
end

# Skip running UnReview Dangerbot if condition is not met
unless unreview_can_be_run?
  @logger.warn LOG_SKIP_RECOMMENDATIONS
  return
end

uri = URI.join(UNREVIEW_ENGINE_URL, '/api/model/recommendations/reviewers')
parameters = {
  project: MR_PROJECT,
  number: MR_IID,
  files: MR_CHANGED_FILES,
  version: UNREVIEW_ENGINE_VERSION,
  n: UNREVIEW_ENGINE_TOP_N
}

# Skip running UnReview Dangerbot if http request fails
response = query_recommendations(uri, parameters)
unless response.is_a?(Net::HTTPSuccess)
  @logger.error LOG_FAILED_HTTP_REQUEST % response.code
  @logger.warn LOG_SKIP_RECOMMENDATIONS
  return
end

reviewers = JSON.parse(response.body, symbolize_names: true)[:reviewers] || []
markdown_reviewers = reviewers
                     .map { |reviewer| "`@#{reviewer}`" }
                     .join(', ')

markdown UNREVIEW_MESSAGE + "|#{markdown_reviewers}|" unless reviewers.empty?
