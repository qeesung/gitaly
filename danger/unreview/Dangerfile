# frozen_string_literal: true

require 'net/http'
require 'json'

MESSAGE = <<~MARKDOWN
  ## UnReview

  UnReview is a code reviewer recommendation system designed to find appropriate code reviewers
  in the most efficient way. To make recommendations, UnReview considers the reviewer's experience
  in the part of the source code proposed by a merge request. For a given project, UnReview automatically
  collects the commit history and merge requests. Using that information, UnReview then trains the model
  that is able to make appropriate recommendations.

  At the moment, UnReview is an early-stage technology. If you have any questions or suggestions,
  feel free to contact us in our `#g_applied_ml` Slack channel. More information on the UnReview
  technology can be found on the
  [project page](https://about.gitlab.com/handbook/engineering/development/modelops/appliedml/projects/unreview/).

  Changes that require review have been detected! Once you've decided who will review this
  merge request, mention them as you normally would! Danger and UnReview does not automatically
  notify them for you.

  | Reviewer |
  | -------- |
MARKDOWN

UNREVIEW_ENGINE_URL = ENV['UNREVIEW_ENGINE_URL']
UNREVIEW_ENGINE_TOP_N = ENV['UNREVIEW_ENGINE_TOP_N'] || 3
UNREVIEW_ENGINE_VERSION = 'v0.1.0'

MR_PROJECT = project_helper.project_name.freeze
MR_IID = helper.mr_iid.to_i.freeze
MR_CHANGED_FILES = helper.all_changed_files.freeze

def unreview_can_be_run?
  !(UNREVIEW_ENGINE_URL.nil? || MR_CHANGED_FILES.empty?)
end

def query_recommendations(uri, parameters)
  Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
    request = Net::HTTP::Post.new(uri, 'Content-Type' => 'application/json')
    request.body = parameters.to_json
    http.request(request)
  end
end

if unreview_can_be_run?
  uri = URI.join(UNREVIEW_ENGINE_URL, '/api/model/recommendations/reviewers')
  parameters = {
    project: MR_PROJECT,
    number: MR_IID,
    files: MR_CHANGED_FILES,
    version: UNREVIEW_ENGINE_VERSION,
    n: UNREVIEW_ENGINE_TOP_N
  }

  response = query_recommendations(uri, parameters)
  if response.is_a?(Net::HTTPSuccess)
    reviewers = JSON.parse(response.body, symbolize_names: true)[:reviewers] || []

    markdown_rows = reviewers.map do |reviewer|
      "| `@#{reviewer}` |"
    end

    markdown MESSAGE + markdown_rows.join("\n") unless reviewers.empty?
  end
end
