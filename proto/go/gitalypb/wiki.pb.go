// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wiki.proto

package gitalypb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WikiGetAllPagesRequest_SortBy int32

const (
	WikiGetAllPagesRequest_TITLE      WikiGetAllPagesRequest_SortBy = 0
	WikiGetAllPagesRequest_CREATED_AT WikiGetAllPagesRequest_SortBy = 1
)

var WikiGetAllPagesRequest_SortBy_name = map[int32]string{
	0: "TITLE",
	1: "CREATED_AT",
}

var WikiGetAllPagesRequest_SortBy_value = map[string]int32{
	"TITLE":      0,
	"CREATED_AT": 1,
}

func (x WikiGetAllPagesRequest_SortBy) String() string {
	return proto.EnumName(WikiGetAllPagesRequest_SortBy_name, int32(x))
}

func (WikiGetAllPagesRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{13, 0}
}

type WikiListPagesRequest_SortBy int32

const (
	WikiListPagesRequest_TITLE      WikiListPagesRequest_SortBy = 0
	WikiListPagesRequest_CREATED_AT WikiListPagesRequest_SortBy = 1
)

var WikiListPagesRequest_SortBy_name = map[int32]string{
	0: "TITLE",
	1: "CREATED_AT",
}

var WikiListPagesRequest_SortBy_value = map[string]int32{
	"TITLE":      0,
	"CREATED_AT": 1,
}

func (x WikiListPagesRequest_SortBy) String() string {
	return proto.EnumName(WikiListPagesRequest_SortBy_name, int32(x))
}

func (WikiListPagesRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{15, 0}
}

type WikiCommitDetails struct {
	Name                 []byte   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email                []byte   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Message              []byte   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	UserId               int32    `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName             []byte   `protobuf:"bytes,5,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WikiCommitDetails) Reset()         { *m = WikiCommitDetails{} }
func (m *WikiCommitDetails) String() string { return proto.CompactTextString(m) }
func (*WikiCommitDetails) ProtoMessage()    {}
func (*WikiCommitDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{0}
}

func (m *WikiCommitDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiCommitDetails.Unmarshal(m, b)
}
func (m *WikiCommitDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiCommitDetails.Marshal(b, m, deterministic)
}
func (m *WikiCommitDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiCommitDetails.Merge(m, src)
}
func (m *WikiCommitDetails) XXX_Size() int {
	return xxx_messageInfo_WikiCommitDetails.Size(m)
}
func (m *WikiCommitDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiCommitDetails.DiscardUnknown(m)
}

var xxx_messageInfo_WikiCommitDetails proto.InternalMessageInfo

func (m *WikiCommitDetails) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WikiCommitDetails) GetEmail() []byte {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *WikiCommitDetails) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *WikiCommitDetails) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *WikiCommitDetails) GetUserName() []byte {
	if m != nil {
		return m.UserName
	}
	return nil
}

type WikiPageVersion struct {
	Commit               *GitCommit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Format               string     `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *WikiPageVersion) Reset()         { *m = WikiPageVersion{} }
func (m *WikiPageVersion) String() string { return proto.CompactTextString(m) }
func (*WikiPageVersion) ProtoMessage()    {}
func (*WikiPageVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{1}
}

func (m *WikiPageVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiPageVersion.Unmarshal(m, b)
}
func (m *WikiPageVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiPageVersion.Marshal(b, m, deterministic)
}
func (m *WikiPageVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiPageVersion.Merge(m, src)
}
func (m *WikiPageVersion) XXX_Size() int {
	return xxx_messageInfo_WikiPageVersion.Size(m)
}
func (m *WikiPageVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiPageVersion.DiscardUnknown(m)
}

var xxx_messageInfo_WikiPageVersion proto.InternalMessageInfo

func (m *WikiPageVersion) GetCommit() *GitCommit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *WikiPageVersion) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type WikiPage struct {
	// These fields are only present in the first message of a WikiPage stream
	Version    *WikiPageVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Format     string           `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Title      []byte           `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	UrlPath    string           `protobuf:"bytes,4,opt,name=url_path,json=urlPath,proto3" json:"url_path,omitempty"`
	Path       []byte           `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	Name       []byte           `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Historical bool             `protobuf:"varint,7,opt,name=historical,proto3" json:"historical,omitempty"`
	// This field is present in all messages of a WikiPage stream
	RawData              []byte   `protobuf:"bytes,8,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WikiPage) Reset()         { *m = WikiPage{} }
func (m *WikiPage) String() string { return proto.CompactTextString(m) }
func (*WikiPage) ProtoMessage()    {}
func (*WikiPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{2}
}

func (m *WikiPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiPage.Unmarshal(m, b)
}
func (m *WikiPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiPage.Marshal(b, m, deterministic)
}
func (m *WikiPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiPage.Merge(m, src)
}
func (m *WikiPage) XXX_Size() int {
	return xxx_messageInfo_WikiPage.Size(m)
}
func (m *WikiPage) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiPage.DiscardUnknown(m)
}

var xxx_messageInfo_WikiPage proto.InternalMessageInfo

func (m *WikiPage) GetVersion() *WikiPageVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *WikiPage) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *WikiPage) GetTitle() []byte {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *WikiPage) GetUrlPath() string {
	if m != nil {
		return m.UrlPath
	}
	return ""
}

func (m *WikiPage) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *WikiPage) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WikiPage) GetHistorical() bool {
	if m != nil {
		return m.Historical
	}
	return false
}

func (m *WikiPage) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

type WikiGetPageVersionsRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	PagePath             []byte      `protobuf:"bytes,2,opt,name=page_path,json=pagePath,proto3" json:"page_path,omitempty"`
	Page                 int32       `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage              int32       `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WikiGetPageVersionsRequest) Reset()         { *m = WikiGetPageVersionsRequest{} }
func (m *WikiGetPageVersionsRequest) String() string { return proto.CompactTextString(m) }
func (*WikiGetPageVersionsRequest) ProtoMessage()    {}
func (*WikiGetPageVersionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{3}
}

func (m *WikiGetPageVersionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiGetPageVersionsRequest.Unmarshal(m, b)
}
func (m *WikiGetPageVersionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiGetPageVersionsRequest.Marshal(b, m, deterministic)
}
func (m *WikiGetPageVersionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiGetPageVersionsRequest.Merge(m, src)
}
func (m *WikiGetPageVersionsRequest) XXX_Size() int {
	return xxx_messageInfo_WikiGetPageVersionsRequest.Size(m)
}
func (m *WikiGetPageVersionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiGetPageVersionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WikiGetPageVersionsRequest proto.InternalMessageInfo

func (m *WikiGetPageVersionsRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *WikiGetPageVersionsRequest) GetPagePath() []byte {
	if m != nil {
		return m.PagePath
	}
	return nil
}

func (m *WikiGetPageVersionsRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *WikiGetPageVersionsRequest) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type WikiGetPageVersionsResponse struct {
	Versions             []*WikiPageVersion `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WikiGetPageVersionsResponse) Reset()         { *m = WikiGetPageVersionsResponse{} }
func (m *WikiGetPageVersionsResponse) String() string { return proto.CompactTextString(m) }
func (*WikiGetPageVersionsResponse) ProtoMessage()    {}
func (*WikiGetPageVersionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{4}
}

func (m *WikiGetPageVersionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiGetPageVersionsResponse.Unmarshal(m, b)
}
func (m *WikiGetPageVersionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiGetPageVersionsResponse.Marshal(b, m, deterministic)
}
func (m *WikiGetPageVersionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiGetPageVersionsResponse.Merge(m, src)
}
func (m *WikiGetPageVersionsResponse) XXX_Size() int {
	return xxx_messageInfo_WikiGetPageVersionsResponse.Size(m)
}
func (m *WikiGetPageVersionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiGetPageVersionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WikiGetPageVersionsResponse proto.InternalMessageInfo

func (m *WikiGetPageVersionsResponse) GetVersions() []*WikiPageVersion {
	if m != nil {
		return m.Versions
	}
	return nil
}

// This message is sent in a stream because the 'content' field may be large.
type WikiWritePageRequest struct {
	// These following fields are only present in the first message.
	Repository    *Repository        `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Name          []byte             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Format        string             `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	CommitDetails *WikiCommitDetails `protobuf:"bytes,4,opt,name=commit_details,json=commitDetails,proto3" json:"commit_details,omitempty"`
	// This field is present in all messages.
	Content              []byte   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WikiWritePageRequest) Reset()         { *m = WikiWritePageRequest{} }
func (m *WikiWritePageRequest) String() string { return proto.CompactTextString(m) }
func (*WikiWritePageRequest) ProtoMessage()    {}
func (*WikiWritePageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{5}
}

func (m *WikiWritePageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiWritePageRequest.Unmarshal(m, b)
}
func (m *WikiWritePageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiWritePageRequest.Marshal(b, m, deterministic)
}
func (m *WikiWritePageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiWritePageRequest.Merge(m, src)
}
func (m *WikiWritePageRequest) XXX_Size() int {
	return xxx_messageInfo_WikiWritePageRequest.Size(m)
}
func (m *WikiWritePageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiWritePageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WikiWritePageRequest proto.InternalMessageInfo

func (m *WikiWritePageRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *WikiWritePageRequest) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WikiWritePageRequest) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *WikiWritePageRequest) GetCommitDetails() *WikiCommitDetails {
	if m != nil {
		return m.CommitDetails
	}
	return nil
}

func (m *WikiWritePageRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type WikiWritePageResponse struct {
	DuplicateError       []byte   `protobuf:"bytes,1,opt,name=duplicate_error,json=duplicateError,proto3" json:"duplicate_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WikiWritePageResponse) Reset()         { *m = WikiWritePageResponse{} }
func (m *WikiWritePageResponse) String() string { return proto.CompactTextString(m) }
func (*WikiWritePageResponse) ProtoMessage()    {}
func (*WikiWritePageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{6}
}

func (m *WikiWritePageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiWritePageResponse.Unmarshal(m, b)
}
func (m *WikiWritePageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiWritePageResponse.Marshal(b, m, deterministic)
}
func (m *WikiWritePageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiWritePageResponse.Merge(m, src)
}
func (m *WikiWritePageResponse) XXX_Size() int {
	return xxx_messageInfo_WikiWritePageResponse.Size(m)
}
func (m *WikiWritePageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiWritePageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WikiWritePageResponse proto.InternalMessageInfo

func (m *WikiWritePageResponse) GetDuplicateError() []byte {
	if m != nil {
		return m.DuplicateError
	}
	return nil
}

type WikiUpdatePageRequest struct {
	// There fields are only present in the first message of the stream
	Repository    *Repository        `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	PagePath      []byte             `protobuf:"bytes,2,opt,name=page_path,json=pagePath,proto3" json:"page_path,omitempty"`
	Title         []byte             `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Format        string             `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
	CommitDetails *WikiCommitDetails `protobuf:"bytes,5,opt,name=commit_details,json=commitDetails,proto3" json:"commit_details,omitempty"`
	// This field is present in all messages
	Content              []byte   `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WikiUpdatePageRequest) Reset()         { *m = WikiUpdatePageRequest{} }
func (m *WikiUpdatePageRequest) String() string { return proto.CompactTextString(m) }
func (*WikiUpdatePageRequest) ProtoMessage()    {}
func (*WikiUpdatePageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{7}
}

func (m *WikiUpdatePageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiUpdatePageRequest.Unmarshal(m, b)
}
func (m *WikiUpdatePageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiUpdatePageRequest.Marshal(b, m, deterministic)
}
func (m *WikiUpdatePageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiUpdatePageRequest.Merge(m, src)
}
func (m *WikiUpdatePageRequest) XXX_Size() int {
	return xxx_messageInfo_WikiUpdatePageRequest.Size(m)
}
func (m *WikiUpdatePageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiUpdatePageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WikiUpdatePageRequest proto.InternalMessageInfo

func (m *WikiUpdatePageRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *WikiUpdatePageRequest) GetPagePath() []byte {
	if m != nil {
		return m.PagePath
	}
	return nil
}

func (m *WikiUpdatePageRequest) GetTitle() []byte {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *WikiUpdatePageRequest) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *WikiUpdatePageRequest) GetCommitDetails() *WikiCommitDetails {
	if m != nil {
		return m.CommitDetails
	}
	return nil
}

func (m *WikiUpdatePageRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type WikiUpdatePageResponse struct {
	Error                []byte   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WikiUpdatePageResponse) Reset()         { *m = WikiUpdatePageResponse{} }
func (m *WikiUpdatePageResponse) String() string { return proto.CompactTextString(m) }
func (*WikiUpdatePageResponse) ProtoMessage()    {}
func (*WikiUpdatePageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{8}
}

func (m *WikiUpdatePageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiUpdatePageResponse.Unmarshal(m, b)
}
func (m *WikiUpdatePageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiUpdatePageResponse.Marshal(b, m, deterministic)
}
func (m *WikiUpdatePageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiUpdatePageResponse.Merge(m, src)
}
func (m *WikiUpdatePageResponse) XXX_Size() int {
	return xxx_messageInfo_WikiUpdatePageResponse.Size(m)
}
func (m *WikiUpdatePageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiUpdatePageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WikiUpdatePageResponse proto.InternalMessageInfo

func (m *WikiUpdatePageResponse) GetError() []byte {
	if m != nil {
		return m.Error
	}
	return nil
}

type WikiDeletePageRequest struct {
	Repository           *Repository        `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	PagePath             []byte             `protobuf:"bytes,2,opt,name=page_path,json=pagePath,proto3" json:"page_path,omitempty"`
	CommitDetails        *WikiCommitDetails `protobuf:"bytes,3,opt,name=commit_details,json=commitDetails,proto3" json:"commit_details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WikiDeletePageRequest) Reset()         { *m = WikiDeletePageRequest{} }
func (m *WikiDeletePageRequest) String() string { return proto.CompactTextString(m) }
func (*WikiDeletePageRequest) ProtoMessage()    {}
func (*WikiDeletePageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{9}
}

func (m *WikiDeletePageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiDeletePageRequest.Unmarshal(m, b)
}
func (m *WikiDeletePageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiDeletePageRequest.Marshal(b, m, deterministic)
}
func (m *WikiDeletePageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiDeletePageRequest.Merge(m, src)
}
func (m *WikiDeletePageRequest) XXX_Size() int {
	return xxx_messageInfo_WikiDeletePageRequest.Size(m)
}
func (m *WikiDeletePageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiDeletePageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WikiDeletePageRequest proto.InternalMessageInfo

func (m *WikiDeletePageRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *WikiDeletePageRequest) GetPagePath() []byte {
	if m != nil {
		return m.PagePath
	}
	return nil
}

func (m *WikiDeletePageRequest) GetCommitDetails() *WikiCommitDetails {
	if m != nil {
		return m.CommitDetails
	}
	return nil
}

type WikiDeletePageResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WikiDeletePageResponse) Reset()         { *m = WikiDeletePageResponse{} }
func (m *WikiDeletePageResponse) String() string { return proto.CompactTextString(m) }
func (*WikiDeletePageResponse) ProtoMessage()    {}
func (*WikiDeletePageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{10}
}

func (m *WikiDeletePageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiDeletePageResponse.Unmarshal(m, b)
}
func (m *WikiDeletePageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiDeletePageResponse.Marshal(b, m, deterministic)
}
func (m *WikiDeletePageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiDeletePageResponse.Merge(m, src)
}
func (m *WikiDeletePageResponse) XXX_Size() int {
	return xxx_messageInfo_WikiDeletePageResponse.Size(m)
}
func (m *WikiDeletePageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiDeletePageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WikiDeletePageResponse proto.InternalMessageInfo

type WikiFindPageRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Title                []byte      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Revision             []byte      `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
	Directory            []byte      `protobuf:"bytes,4,opt,name=directory,proto3" json:"directory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WikiFindPageRequest) Reset()         { *m = WikiFindPageRequest{} }
func (m *WikiFindPageRequest) String() string { return proto.CompactTextString(m) }
func (*WikiFindPageRequest) ProtoMessage()    {}
func (*WikiFindPageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{11}
}

func (m *WikiFindPageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiFindPageRequest.Unmarshal(m, b)
}
func (m *WikiFindPageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiFindPageRequest.Marshal(b, m, deterministic)
}
func (m *WikiFindPageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiFindPageRequest.Merge(m, src)
}
func (m *WikiFindPageRequest) XXX_Size() int {
	return xxx_messageInfo_WikiFindPageRequest.Size(m)
}
func (m *WikiFindPageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiFindPageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WikiFindPageRequest proto.InternalMessageInfo

func (m *WikiFindPageRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *WikiFindPageRequest) GetTitle() []byte {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *WikiFindPageRequest) GetRevision() []byte {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *WikiFindPageRequest) GetDirectory() []byte {
	if m != nil {
		return m.Directory
	}
	return nil
}

// WikiFindPageResponse is a stream because we need multiple WikiPage
// messages to send the raw_data field.
type WikiFindPageResponse struct {
	Page                 *WikiPage `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *WikiFindPageResponse) Reset()         { *m = WikiFindPageResponse{} }
func (m *WikiFindPageResponse) String() string { return proto.CompactTextString(m) }
func (*WikiFindPageResponse) ProtoMessage()    {}
func (*WikiFindPageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{12}
}

func (m *WikiFindPageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiFindPageResponse.Unmarshal(m, b)
}
func (m *WikiFindPageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiFindPageResponse.Marshal(b, m, deterministic)
}
func (m *WikiFindPageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiFindPageResponse.Merge(m, src)
}
func (m *WikiFindPageResponse) XXX_Size() int {
	return xxx_messageInfo_WikiFindPageResponse.Size(m)
}
func (m *WikiFindPageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiFindPageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WikiFindPageResponse proto.InternalMessageInfo

func (m *WikiFindPageResponse) GetPage() *WikiPage {
	if m != nil {
		return m.Page
	}
	return nil
}

type WikiGetAllPagesRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Passing 0 means no limit is applied
	Limit                uint32                        `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	DirectionDesc        bool                          `protobuf:"varint,3,opt,name=direction_desc,json=directionDesc,proto3" json:"direction_desc,omitempty"`
	Sort                 WikiGetAllPagesRequest_SortBy `protobuf:"varint,4,opt,name=sort,proto3,enum=gitaly.WikiGetAllPagesRequest_SortBy" json:"sort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *WikiGetAllPagesRequest) Reset()         { *m = WikiGetAllPagesRequest{} }
func (m *WikiGetAllPagesRequest) String() string { return proto.CompactTextString(m) }
func (*WikiGetAllPagesRequest) ProtoMessage()    {}
func (*WikiGetAllPagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{13}
}

func (m *WikiGetAllPagesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiGetAllPagesRequest.Unmarshal(m, b)
}
func (m *WikiGetAllPagesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiGetAllPagesRequest.Marshal(b, m, deterministic)
}
func (m *WikiGetAllPagesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiGetAllPagesRequest.Merge(m, src)
}
func (m *WikiGetAllPagesRequest) XXX_Size() int {
	return xxx_messageInfo_WikiGetAllPagesRequest.Size(m)
}
func (m *WikiGetAllPagesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiGetAllPagesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WikiGetAllPagesRequest proto.InternalMessageInfo

func (m *WikiGetAllPagesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *WikiGetAllPagesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *WikiGetAllPagesRequest) GetDirectionDesc() bool {
	if m != nil {
		return m.DirectionDesc
	}
	return false
}

func (m *WikiGetAllPagesRequest) GetSort() WikiGetAllPagesRequest_SortBy {
	if m != nil {
		return m.Sort
	}
	return WikiGetAllPagesRequest_TITLE
}

// The WikiGetAllPagesResponse stream is a concatenation of WikiPage streams
type WikiGetAllPagesResponse struct {
	Page *WikiPage `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// When end_of_page is true it signals a change of page for the next Response message (if any)
	EndOfPage            bool     `protobuf:"varint,2,opt,name=end_of_page,json=endOfPage,proto3" json:"end_of_page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WikiGetAllPagesResponse) Reset()         { *m = WikiGetAllPagesResponse{} }
func (m *WikiGetAllPagesResponse) String() string { return proto.CompactTextString(m) }
func (*WikiGetAllPagesResponse) ProtoMessage()    {}
func (*WikiGetAllPagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{14}
}

func (m *WikiGetAllPagesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiGetAllPagesResponse.Unmarshal(m, b)
}
func (m *WikiGetAllPagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiGetAllPagesResponse.Marshal(b, m, deterministic)
}
func (m *WikiGetAllPagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiGetAllPagesResponse.Merge(m, src)
}
func (m *WikiGetAllPagesResponse) XXX_Size() int {
	return xxx_messageInfo_WikiGetAllPagesResponse.Size(m)
}
func (m *WikiGetAllPagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiGetAllPagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WikiGetAllPagesResponse proto.InternalMessageInfo

func (m *WikiGetAllPagesResponse) GetPage() *WikiPage {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *WikiGetAllPagesResponse) GetEndOfPage() bool {
	if m != nil {
		return m.EndOfPage
	}
	return false
}

type WikiListPagesRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Passing 0 means no limit is applied
	Limit                uint32                      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	DirectionDesc        bool                        `protobuf:"varint,3,opt,name=direction_desc,json=directionDesc,proto3" json:"direction_desc,omitempty"`
	Sort                 WikiListPagesRequest_SortBy `protobuf:"varint,4,opt,name=sort,proto3,enum=gitaly.WikiListPagesRequest_SortBy" json:"sort,omitempty"`
	Offset               uint32                      `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *WikiListPagesRequest) Reset()         { *m = WikiListPagesRequest{} }
func (m *WikiListPagesRequest) String() string { return proto.CompactTextString(m) }
func (*WikiListPagesRequest) ProtoMessage()    {}
func (*WikiListPagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{15}
}

func (m *WikiListPagesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiListPagesRequest.Unmarshal(m, b)
}
func (m *WikiListPagesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiListPagesRequest.Marshal(b, m, deterministic)
}
func (m *WikiListPagesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiListPagesRequest.Merge(m, src)
}
func (m *WikiListPagesRequest) XXX_Size() int {
	return xxx_messageInfo_WikiListPagesRequest.Size(m)
}
func (m *WikiListPagesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiListPagesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WikiListPagesRequest proto.InternalMessageInfo

func (m *WikiListPagesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *WikiListPagesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *WikiListPagesRequest) GetDirectionDesc() bool {
	if m != nil {
		return m.DirectionDesc
	}
	return false
}

func (m *WikiListPagesRequest) GetSort() WikiListPagesRequest_SortBy {
	if m != nil {
		return m.Sort
	}
	return WikiListPagesRequest_TITLE
}

func (m *WikiListPagesRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// The WikiListPagesResponse stream is a concatenation of WikiPage streams without content
type WikiListPagesResponse struct {
	Page                 *WikiPage `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *WikiListPagesResponse) Reset()         { *m = WikiListPagesResponse{} }
func (m *WikiListPagesResponse) String() string { return proto.CompactTextString(m) }
func (*WikiListPagesResponse) ProtoMessage()    {}
func (*WikiListPagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c56f90469cec0af, []int{16}
}

func (m *WikiListPagesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WikiListPagesResponse.Unmarshal(m, b)
}
func (m *WikiListPagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WikiListPagesResponse.Marshal(b, m, deterministic)
}
func (m *WikiListPagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WikiListPagesResponse.Merge(m, src)
}
func (m *WikiListPagesResponse) XXX_Size() int {
	return xxx_messageInfo_WikiListPagesResponse.Size(m)
}
func (m *WikiListPagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WikiListPagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WikiListPagesResponse proto.InternalMessageInfo

func (m *WikiListPagesResponse) GetPage() *WikiPage {
	if m != nil {
		return m.Page
	}
	return nil
}

func init() {
	proto.RegisterEnum("gitaly.WikiGetAllPagesRequest_SortBy", WikiGetAllPagesRequest_SortBy_name, WikiGetAllPagesRequest_SortBy_value)
	proto.RegisterEnum("gitaly.WikiListPagesRequest_SortBy", WikiListPagesRequest_SortBy_name, WikiListPagesRequest_SortBy_value)
	proto.RegisterType((*WikiCommitDetails)(nil), "gitaly.WikiCommitDetails")
	proto.RegisterType((*WikiPageVersion)(nil), "gitaly.WikiPageVersion")
	proto.RegisterType((*WikiPage)(nil), "gitaly.WikiPage")
	proto.RegisterType((*WikiGetPageVersionsRequest)(nil), "gitaly.WikiGetPageVersionsRequest")
	proto.RegisterType((*WikiGetPageVersionsResponse)(nil), "gitaly.WikiGetPageVersionsResponse")
	proto.RegisterType((*WikiWritePageRequest)(nil), "gitaly.WikiWritePageRequest")
	proto.RegisterType((*WikiWritePageResponse)(nil), "gitaly.WikiWritePageResponse")
	proto.RegisterType((*WikiUpdatePageRequest)(nil), "gitaly.WikiUpdatePageRequest")
	proto.RegisterType((*WikiUpdatePageResponse)(nil), "gitaly.WikiUpdatePageResponse")
	proto.RegisterType((*WikiDeletePageRequest)(nil), "gitaly.WikiDeletePageRequest")
	proto.RegisterType((*WikiDeletePageResponse)(nil), "gitaly.WikiDeletePageResponse")
	proto.RegisterType((*WikiFindPageRequest)(nil), "gitaly.WikiFindPageRequest")
	proto.RegisterType((*WikiFindPageResponse)(nil), "gitaly.WikiFindPageResponse")
	proto.RegisterType((*WikiGetAllPagesRequest)(nil), "gitaly.WikiGetAllPagesRequest")
	proto.RegisterType((*WikiGetAllPagesResponse)(nil), "gitaly.WikiGetAllPagesResponse")
	proto.RegisterType((*WikiListPagesRequest)(nil), "gitaly.WikiListPagesRequest")
	proto.RegisterType((*WikiListPagesResponse)(nil), "gitaly.WikiListPagesResponse")
}

func init() { proto.RegisterFile("wiki.proto", fileDescriptor_5c56f90469cec0af) }

var fileDescriptor_5c56f90469cec0af = []byte{
	// 1014 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0x67, 0x1d, 0xff, 0x59, 0xbf, 0xc4, 0x6e, 0x3a, 0x94, 0x66, 0xeb, 0x84, 0x10, 0x6d, 0xa8,
	0x30, 0x12, 0x38, 0x25, 0x3d, 0x00, 0x12, 0x48, 0x4d, 0xea, 0x10, 0x55, 0xaa, 0xa0, 0xda, 0x98,
	0x46, 0x20, 0xa4, 0xd5, 0x64, 0x77, 0x6c, 0x8f, 0xba, 0xde, 0x59, 0x66, 0xc6, 0x89, 0x72, 0xe6,
	0x0c, 0x57, 0xb8, 0x21, 0xf1, 0x09, 0xf8, 0x14, 0x7c, 0x06, 0xbe, 0x02, 0x27, 0xae, 0x88, 0x13,
	0x9a, 0x99, 0xb5, 0xbd, 0xbb, 0xb6, 0x03, 0x81, 0x08, 0xf5, 0xb6, 0xef, 0xcf, 0xbc, 0x79, 0xbf,
	0xdf, 0xfb, 0x33, 0x36, 0xc0, 0x05, 0x7d, 0x41, 0x3b, 0x09, 0x67, 0x92, 0xa1, 0xea, 0x80, 0x4a,
	0x1c, 0x5d, 0xb6, 0x20, 0xa2, 0xb1, 0x34, 0xba, 0xd6, 0x9a, 0x18, 0x62, 0x4e, 0x42, 0x23, 0xb9,
	0xdf, 0x5a, 0x70, 0xfb, 0x94, 0xbe, 0xa0, 0x8f, 0xd9, 0x68, 0x44, 0x65, 0x97, 0x48, 0x4c, 0x23,
	0x81, 0x10, 0x94, 0x63, 0x3c, 0x22, 0x8e, 0xb5, 0x63, 0xb5, 0xd7, 0x3c, 0xfd, 0x8d, 0xee, 0x40,
	0x85, 0x8c, 0x30, 0x8d, 0x9c, 0x92, 0x56, 0x1a, 0x01, 0x39, 0x50, 0x1b, 0x11, 0x21, 0xf0, 0x80,
	0x38, 0x2b, 0x5a, 0x3f, 0x11, 0xd1, 0x06, 0xd4, 0xc6, 0x82, 0x70, 0x9f, 0x86, 0x4e, 0x79, 0xc7,
	0x6a, 0x57, 0xbc, 0xaa, 0x12, 0x9f, 0x84, 0x68, 0x13, 0xea, 0xda, 0xa0, 0x6f, 0xa8, 0xe8, 0x43,
	0xb6, 0x52, 0x7c, 0x8a, 0x47, 0xc4, 0xed, 0xc1, 0x2d, 0x95, 0xce, 0x33, 0x3c, 0x20, 0xcf, 0x09,
	0x17, 0x94, 0xc5, 0xe8, 0x6d, 0xa8, 0x06, 0x3a, 0x3b, 0x9d, 0xce, 0xea, 0xfe, 0xed, 0x8e, 0x41,
	0xd5, 0x39, 0xa6, 0xd2, 0xa4, 0xed, 0xa5, 0x0e, 0xe8, 0x2e, 0x54, 0xfb, 0x8c, 0x8f, 0xb0, 0xd4,
	0x49, 0xd6, 0xbd, 0x54, 0x72, 0x7f, 0xb3, 0xc0, 0x9e, 0x84, 0x45, 0xef, 0x41, 0xed, 0xdc, 0x84,
	0x4e, 0x03, 0x6e, 0x4c, 0x02, 0x16, 0x6e, 0xf6, 0x26, 0x7e, 0xcb, 0xe2, 0x2a, 0x4e, 0x24, 0x95,
	0xd1, 0x04, 0xbb, 0x11, 0xd0, 0x3d, 0xb0, 0xc7, 0x3c, 0xf2, 0x13, 0x2c, 0x87, 0x1a, 0x7a, 0xdd,
	0xab, 0x8d, 0x79, 0xf4, 0x0c, 0xcb, 0xa1, 0x22, 0x56, 0xab, 0x0d, 0x6c, 0xfd, 0x3d, 0x25, 0xbb,
	0x9a, 0x21, 0x7b, 0x1b, 0x60, 0x48, 0x85, 0x64, 0x9c, 0x06, 0x38, 0x72, 0x6a, 0x3b, 0x56, 0xdb,
	0xf6, 0x32, 0x1a, 0x75, 0x05, 0xc7, 0x17, 0x7e, 0x88, 0x25, 0x76, 0x6c, 0xc3, 0x3b, 0xc7, 0x17,
	0x5d, 0x2c, 0xb1, 0xfb, 0x93, 0x05, 0x2d, 0x05, 0xe4, 0x98, 0xc8, 0x0c, 0x16, 0xe1, 0x91, 0xaf,
	0xc7, 0x44, 0x48, 0xf4, 0x01, 0x00, 0x27, 0x09, 0x13, 0x54, 0x32, 0x7e, 0x99, 0x12, 0x80, 0x26,
	0x04, 0x78, 0x53, 0xcb, 0x61, 0xf9, 0x87, 0x5f, 0xde, 0xb1, 0xbc, 0x8c, 0xaf, 0xaa, 0x5b, 0x82,
	0x07, 0xc4, 0xe0, 0x32, 0x4d, 0x60, 0x2b, 0xc5, 0x0c, 0x58, 0xda, 0x04, 0x15, 0x4f, 0x7f, 0xab,
	0x24, 0x13, 0xc2, 0x7d, 0xad, 0x37, 0x2d, 0x50, 0x4b, 0x08, 0x57, 0x49, 0xb9, 0x1e, 0x6c, 0x2e,
	0xcc, 0x51, 0x24, 0x2c, 0x16, 0x04, 0x3d, 0x04, 0x3b, 0xa5, 0x5e, 0x38, 0xd6, 0xce, 0xca, 0x55,
	0x35, 0x9a, 0x3a, 0xba, 0xbf, 0x5a, 0x70, 0x47, 0x59, 0x4f, 0x39, 0x95, 0x44, 0xb9, 0xfc, 0x77,
	0xc8, 0x93, 0xd2, 0x94, 0x32, 0xa5, 0x99, 0xf5, 0xc2, 0x4a, 0xae, 0x17, 0x1e, 0x41, 0xd3, 0x74,
	0xa1, 0x1f, 0x9a, 0x29, 0xd2, 0x98, 0x57, 0xf7, 0xef, 0x65, 0x33, 0xcf, 0x8d, 0x99, 0xd7, 0x08,
	0x72, 0x53, 0xe7, 0x40, 0x2d, 0x60, 0xb1, 0x24, 0xb1, 0x4c, 0xfb, 0x63, 0x22, 0xba, 0x8f, 0xe0,
	0xb5, 0x02, 0xb2, 0x94, 0xa8, 0xb7, 0xe0, 0x56, 0x38, 0x4e, 0x22, 0x1a, 0x60, 0x49, 0x7c, 0xc2,
	0x39, 0xe3, 0xe9, 0xcc, 0x36, 0xa7, 0xea, 0x23, 0xa5, 0x75, 0xff, 0xb0, 0x4c, 0x88, 0xcf, 0x93,
	0x10, 0xdf, 0x14, 0x3b, 0x57, 0x36, 0xc4, 0xe2, 0xd1, 0x98, 0x91, 0x57, 0xfe, 0x1b, 0xf2, 0x2a,
	0xff, 0x9e, 0xbc, 0x6a, 0x9e, 0xbc, 0x0e, 0xdc, 0x2d, 0x22, 0x4f, 0xd9, 0x53, 0x2b, 0x2d, 0xc3,
	0x99, 0x11, 0xdc, 0x9f, 0x53, 0xaa, 0xba, 0x24, 0x22, 0xff, 0x0b, 0x55, 0xf3, 0xe0, 0x57, 0xae,
	0x07, 0xde, 0x75, 0x0c, 0xc4, 0x6c, 0xc6, 0x06, 0xa2, 0xfb, 0xa3, 0x05, 0xaf, 0x2a, 0xd3, 0x27,
	0x34, 0x0e, 0x6f, 0x06, 0xca, 0xb4, 0xb0, 0xa5, 0x6c, 0x61, 0x5b, 0x60, 0x73, 0x72, 0x4e, 0xf5,
	0x56, 0x35, 0x15, 0x9f, 0xca, 0x68, 0x0b, 0xea, 0x21, 0xe5, 0x24, 0xd0, 0x57, 0x95, 0xb5, 0x71,
	0xa6, 0x70, 0x3f, 0x32, 0x53, 0x3b, 0x4b, 0x30, 0x2d, 0xce, 0x9b, 0xe9, 0x46, 0x31, 0xb9, 0xad,
	0x17, 0xe7, 0xdf, 0xec, 0x18, 0xf7, 0x77, 0xcb, 0x40, 0x3f, 0x26, 0xf2, 0x20, 0x8a, 0x94, 0x41,
	0xdc, 0x08, 0xc4, 0x88, 0xaa, 0x07, 0x47, 0x41, 0x6c, 0x78, 0x46, 0x40, 0xf7, 0xa1, 0x69, 0xb2,
	0xa6, 0x2c, 0xf6, 0x43, 0x22, 0x02, 0x0d, 0xd4, 0xf6, 0x1a, 0x53, 0x6d, 0x97, 0x88, 0x00, 0x7d,
	0x08, 0x65, 0xc1, 0xb8, 0x69, 0xf0, 0xe6, 0xfe, 0xfd, 0x6c, 0xde, 0xf3, 0x49, 0x76, 0x4e, 0x18,
	0x97, 0x87, 0x97, 0x9e, 0x3e, 0xe2, 0xee, 0x42, 0xd5, 0xc8, 0xa8, 0x0e, 0x95, 0xde, 0x93, 0xde,
	0xd3, 0xa3, 0xf5, 0x57, 0x50, 0x13, 0xe0, 0xb1, 0x77, 0x74, 0xd0, 0x3b, 0xea, 0xfa, 0x07, 0xbd,
	0x75, 0xcb, 0xf5, 0x61, 0x63, 0x2e, 0xd6, 0x75, 0x28, 0x43, 0xdb, 0xb0, 0x4a, 0xe2, 0xd0, 0x67,
	0x7d, 0xb3, 0x99, 0x4b, 0x1a, 0x44, 0x9d, 0xc4, 0xe1, 0x67, 0x7d, 0xbd, 0x9b, 0xbf, 0x29, 0x99,
	0x8a, 0x3c, 0xa5, 0x42, 0xbe, 0x0c, 0x84, 0xbe, 0x9f, 0x23, 0x74, 0x37, 0x8b, 0xaa, 0x98, 0x62,
	0x8e, 0x4e, 0xb5, 0x6c, 0x58, 0xbf, 0x2f, 0x88, 0x59, 0xa7, 0x0d, 0x2f, 0x95, 0xfe, 0x19, 0xcd,
	0x1f, 0x9b, 0x25, 0x90, 0xb9, 0xe1, 0x3a, 0x24, 0xef, 0x7f, 0x57, 0x81, 0x55, 0xa5, 0x3a, 0x21,
	0xfc, 0x9c, 0x06, 0x04, 0x0d, 0xcd, 0x18, 0x16, 0x1e, 0x3c, 0xe4, 0x16, 0xda, 0x63, 0xc1, 0x8b,
	0xdd, 0xda, 0xbd, 0xd2, 0x27, 0x9d, 0xf3, 0xea, 0x9f, 0xdf, 0xb7, 0x4b, 0x76, 0xe9, 0x81, 0x85,
	0x9e, 0x43, 0x23, 0xf7, 0x56, 0xa0, 0xad, 0xec, 0xf9, 0xe2, 0xe3, 0xd8, 0x7a, 0x7d, 0x89, 0x35,
	0x17, 0xd7, 0x6a, 0x5b, 0xe8, 0x0b, 0x68, 0xe6, 0xd7, 0x28, 0xca, 0x1d, 0x9d, 0x7b, 0x58, 0x5a,
	0xdb, 0xcb, 0xcc, 0x73, 0xa1, 0x4f, 0x4d, 0xe8, 0xd9, 0xfa, 0xca, 0x87, 0x9e, 0x5b, 0xc4, 0xf9,
	0xd0, 0x0b, 0xb6, 0x5e, 0x1a, 0x1a, 0x9d, 0xc0, 0x5a, 0x76, 0xb7, 0xa0, 0xcd, 0xec, 0xb9, 0xc2,
	0x4a, 0x6c, 0x6d, 0x2d, 0x36, 0xce, 0x11, 0xfc, 0x95, 0xf9, 0x89, 0x9a, 0x19, 0x40, 0xb4, 0x7d,
	0xf5, 0x94, 0xb7, 0xde, 0x58, 0x6a, 0x5f, 0x56, 0xbe, 0x69, 0xdf, 0xe5, 0xcb, 0x57, 0x6c, 0xf8,
	0x7c, 0xf9, 0xe6, 0x9a, 0x75, 0x16, 0xf7, 0xf0, 0xc1, 0x97, 0xca, 0x33, 0xc2, 0x67, 0x9d, 0x80,
	0x8d, 0xf6, 0xcc, 0xe7, 0xbb, 0x8c, 0x0f, 0xf6, 0xcc, 0xf9, 0x3d, 0xfd, 0x77, 0x60, 0x6f, 0xc0,
	0x52, 0x39, 0x39, 0x3b, 0xab, 0x6a, 0xd5, 0xc3, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x29, 0xb1,
	0x3b, 0xcf, 0x51, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WikiServiceClient is the client API for WikiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WikiServiceClient interface {
	WikiGetPageVersions(ctx context.Context, in *WikiGetPageVersionsRequest, opts ...grpc.CallOption) (WikiService_WikiGetPageVersionsClient, error)
	WikiWritePage(ctx context.Context, opts ...grpc.CallOption) (WikiService_WikiWritePageClient, error)
	WikiUpdatePage(ctx context.Context, opts ...grpc.CallOption) (WikiService_WikiUpdatePageClient, error)
	WikiDeletePage(ctx context.Context, in *WikiDeletePageRequest, opts ...grpc.CallOption) (*WikiDeletePageResponse, error)
	// WikiFindPage returns a stream because the page's raw_data field may be arbitrarily large.
	WikiFindPage(ctx context.Context, in *WikiFindPageRequest, opts ...grpc.CallOption) (WikiService_WikiFindPageClient, error)
	WikiGetAllPages(ctx context.Context, in *WikiGetAllPagesRequest, opts ...grpc.CallOption) (WikiService_WikiGetAllPagesClient, error)
	WikiListPages(ctx context.Context, in *WikiListPagesRequest, opts ...grpc.CallOption) (WikiService_WikiListPagesClient, error)
}

type wikiServiceClient struct {
	cc *grpc.ClientConn
}

func NewWikiServiceClient(cc *grpc.ClientConn) WikiServiceClient {
	return &wikiServiceClient{cc}
}

func (c *wikiServiceClient) WikiGetPageVersions(ctx context.Context, in *WikiGetPageVersionsRequest, opts ...grpc.CallOption) (WikiService_WikiGetPageVersionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WikiService_serviceDesc.Streams[0], "/gitaly.WikiService/WikiGetPageVersions", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiServiceWikiGetPageVersionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WikiService_WikiGetPageVersionsClient interface {
	Recv() (*WikiGetPageVersionsResponse, error)
	grpc.ClientStream
}

type wikiServiceWikiGetPageVersionsClient struct {
	grpc.ClientStream
}

func (x *wikiServiceWikiGetPageVersionsClient) Recv() (*WikiGetPageVersionsResponse, error) {
	m := new(WikiGetPageVersionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wikiServiceClient) WikiWritePage(ctx context.Context, opts ...grpc.CallOption) (WikiService_WikiWritePageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WikiService_serviceDesc.Streams[1], "/gitaly.WikiService/WikiWritePage", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiServiceWikiWritePageClient{stream}
	return x, nil
}

type WikiService_WikiWritePageClient interface {
	Send(*WikiWritePageRequest) error
	CloseAndRecv() (*WikiWritePageResponse, error)
	grpc.ClientStream
}

type wikiServiceWikiWritePageClient struct {
	grpc.ClientStream
}

func (x *wikiServiceWikiWritePageClient) Send(m *WikiWritePageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wikiServiceWikiWritePageClient) CloseAndRecv() (*WikiWritePageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WikiWritePageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wikiServiceClient) WikiUpdatePage(ctx context.Context, opts ...grpc.CallOption) (WikiService_WikiUpdatePageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WikiService_serviceDesc.Streams[2], "/gitaly.WikiService/WikiUpdatePage", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiServiceWikiUpdatePageClient{stream}
	return x, nil
}

type WikiService_WikiUpdatePageClient interface {
	Send(*WikiUpdatePageRequest) error
	CloseAndRecv() (*WikiUpdatePageResponse, error)
	grpc.ClientStream
}

type wikiServiceWikiUpdatePageClient struct {
	grpc.ClientStream
}

func (x *wikiServiceWikiUpdatePageClient) Send(m *WikiUpdatePageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wikiServiceWikiUpdatePageClient) CloseAndRecv() (*WikiUpdatePageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WikiUpdatePageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wikiServiceClient) WikiDeletePage(ctx context.Context, in *WikiDeletePageRequest, opts ...grpc.CallOption) (*WikiDeletePageResponse, error) {
	out := new(WikiDeletePageResponse)
	err := c.cc.Invoke(ctx, "/gitaly.WikiService/WikiDeletePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiServiceClient) WikiFindPage(ctx context.Context, in *WikiFindPageRequest, opts ...grpc.CallOption) (WikiService_WikiFindPageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WikiService_serviceDesc.Streams[3], "/gitaly.WikiService/WikiFindPage", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiServiceWikiFindPageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WikiService_WikiFindPageClient interface {
	Recv() (*WikiFindPageResponse, error)
	grpc.ClientStream
}

type wikiServiceWikiFindPageClient struct {
	grpc.ClientStream
}

func (x *wikiServiceWikiFindPageClient) Recv() (*WikiFindPageResponse, error) {
	m := new(WikiFindPageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wikiServiceClient) WikiGetAllPages(ctx context.Context, in *WikiGetAllPagesRequest, opts ...grpc.CallOption) (WikiService_WikiGetAllPagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WikiService_serviceDesc.Streams[4], "/gitaly.WikiService/WikiGetAllPages", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiServiceWikiGetAllPagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WikiService_WikiGetAllPagesClient interface {
	Recv() (*WikiGetAllPagesResponse, error)
	grpc.ClientStream
}

type wikiServiceWikiGetAllPagesClient struct {
	grpc.ClientStream
}

func (x *wikiServiceWikiGetAllPagesClient) Recv() (*WikiGetAllPagesResponse, error) {
	m := new(WikiGetAllPagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wikiServiceClient) WikiListPages(ctx context.Context, in *WikiListPagesRequest, opts ...grpc.CallOption) (WikiService_WikiListPagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WikiService_serviceDesc.Streams[5], "/gitaly.WikiService/WikiListPages", opts...)
	if err != nil {
		return nil, err
	}
	x := &wikiServiceWikiListPagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WikiService_WikiListPagesClient interface {
	Recv() (*WikiListPagesResponse, error)
	grpc.ClientStream
}

type wikiServiceWikiListPagesClient struct {
	grpc.ClientStream
}

func (x *wikiServiceWikiListPagesClient) Recv() (*WikiListPagesResponse, error) {
	m := new(WikiListPagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WikiServiceServer is the server API for WikiService service.
type WikiServiceServer interface {
	WikiGetPageVersions(*WikiGetPageVersionsRequest, WikiService_WikiGetPageVersionsServer) error
	WikiWritePage(WikiService_WikiWritePageServer) error
	WikiUpdatePage(WikiService_WikiUpdatePageServer) error
	WikiDeletePage(context.Context, *WikiDeletePageRequest) (*WikiDeletePageResponse, error)
	// WikiFindPage returns a stream because the page's raw_data field may be arbitrarily large.
	WikiFindPage(*WikiFindPageRequest, WikiService_WikiFindPageServer) error
	WikiGetAllPages(*WikiGetAllPagesRequest, WikiService_WikiGetAllPagesServer) error
	WikiListPages(*WikiListPagesRequest, WikiService_WikiListPagesServer) error
}

// UnimplementedWikiServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWikiServiceServer struct {
}

func (*UnimplementedWikiServiceServer) WikiGetPageVersions(req *WikiGetPageVersionsRequest, srv WikiService_WikiGetPageVersionsServer) error {
	return status.Errorf(codes.Unimplemented, "method WikiGetPageVersions not implemented")
}
func (*UnimplementedWikiServiceServer) WikiWritePage(srv WikiService_WikiWritePageServer) error {
	return status.Errorf(codes.Unimplemented, "method WikiWritePage not implemented")
}
func (*UnimplementedWikiServiceServer) WikiUpdatePage(srv WikiService_WikiUpdatePageServer) error {
	return status.Errorf(codes.Unimplemented, "method WikiUpdatePage not implemented")
}
func (*UnimplementedWikiServiceServer) WikiDeletePage(ctx context.Context, req *WikiDeletePageRequest) (*WikiDeletePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WikiDeletePage not implemented")
}
func (*UnimplementedWikiServiceServer) WikiFindPage(req *WikiFindPageRequest, srv WikiService_WikiFindPageServer) error {
	return status.Errorf(codes.Unimplemented, "method WikiFindPage not implemented")
}
func (*UnimplementedWikiServiceServer) WikiGetAllPages(req *WikiGetAllPagesRequest, srv WikiService_WikiGetAllPagesServer) error {
	return status.Errorf(codes.Unimplemented, "method WikiGetAllPages not implemented")
}
func (*UnimplementedWikiServiceServer) WikiListPages(req *WikiListPagesRequest, srv WikiService_WikiListPagesServer) error {
	return status.Errorf(codes.Unimplemented, "method WikiListPages not implemented")
}

func RegisterWikiServiceServer(s *grpc.Server, srv WikiServiceServer) {
	s.RegisterService(&_WikiService_serviceDesc, srv)
}

func _WikiService_WikiGetPageVersions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WikiGetPageVersionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WikiServiceServer).WikiGetPageVersions(m, &wikiServiceWikiGetPageVersionsServer{stream})
}

type WikiService_WikiGetPageVersionsServer interface {
	Send(*WikiGetPageVersionsResponse) error
	grpc.ServerStream
}

type wikiServiceWikiGetPageVersionsServer struct {
	grpc.ServerStream
}

func (x *wikiServiceWikiGetPageVersionsServer) Send(m *WikiGetPageVersionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WikiService_WikiWritePage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WikiServiceServer).WikiWritePage(&wikiServiceWikiWritePageServer{stream})
}

type WikiService_WikiWritePageServer interface {
	SendAndClose(*WikiWritePageResponse) error
	Recv() (*WikiWritePageRequest, error)
	grpc.ServerStream
}

type wikiServiceWikiWritePageServer struct {
	grpc.ServerStream
}

func (x *wikiServiceWikiWritePageServer) SendAndClose(m *WikiWritePageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wikiServiceWikiWritePageServer) Recv() (*WikiWritePageRequest, error) {
	m := new(WikiWritePageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WikiService_WikiUpdatePage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WikiServiceServer).WikiUpdatePage(&wikiServiceWikiUpdatePageServer{stream})
}

type WikiService_WikiUpdatePageServer interface {
	SendAndClose(*WikiUpdatePageResponse) error
	Recv() (*WikiUpdatePageRequest, error)
	grpc.ServerStream
}

type wikiServiceWikiUpdatePageServer struct {
	grpc.ServerStream
}

func (x *wikiServiceWikiUpdatePageServer) SendAndClose(m *WikiUpdatePageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wikiServiceWikiUpdatePageServer) Recv() (*WikiUpdatePageRequest, error) {
	m := new(WikiUpdatePageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WikiService_WikiDeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WikiDeletePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServiceServer).WikiDeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.WikiService/WikiDeletePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServiceServer).WikiDeletePage(ctx, req.(*WikiDeletePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiService_WikiFindPage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WikiFindPageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WikiServiceServer).WikiFindPage(m, &wikiServiceWikiFindPageServer{stream})
}

type WikiService_WikiFindPageServer interface {
	Send(*WikiFindPageResponse) error
	grpc.ServerStream
}

type wikiServiceWikiFindPageServer struct {
	grpc.ServerStream
}

func (x *wikiServiceWikiFindPageServer) Send(m *WikiFindPageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WikiService_WikiGetAllPages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WikiGetAllPagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WikiServiceServer).WikiGetAllPages(m, &wikiServiceWikiGetAllPagesServer{stream})
}

type WikiService_WikiGetAllPagesServer interface {
	Send(*WikiGetAllPagesResponse) error
	grpc.ServerStream
}

type wikiServiceWikiGetAllPagesServer struct {
	grpc.ServerStream
}

func (x *wikiServiceWikiGetAllPagesServer) Send(m *WikiGetAllPagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WikiService_WikiListPages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WikiListPagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WikiServiceServer).WikiListPages(m, &wikiServiceWikiListPagesServer{stream})
}

type WikiService_WikiListPagesServer interface {
	Send(*WikiListPagesResponse) error
	grpc.ServerStream
}

type wikiServiceWikiListPagesServer struct {
	grpc.ServerStream
}

func (x *wikiServiceWikiListPagesServer) Send(m *WikiListPagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _WikiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.WikiService",
	HandlerType: (*WikiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WikiDeletePage",
			Handler:    _WikiService_WikiDeletePage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WikiGetPageVersions",
			Handler:       _WikiService_WikiGetPageVersions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WikiWritePage",
			Handler:       _WikiService_WikiWritePage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WikiUpdatePage",
			Handler:       _WikiService_WikiUpdatePage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WikiFindPage",
			Handler:       _WikiService_WikiFindPage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WikiGetAllPages",
			Handler:       _WikiService_WikiGetAllPages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WikiListPages",
			Handler:       _WikiService_WikiListPages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wiki.proto",
}
