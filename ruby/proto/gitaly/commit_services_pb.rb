# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: commit.proto for package 'gitaly'

require 'grpc'
require 'commit_pb'

module Gitaly
  module CommitService
    # CommitService is a service which provides RPCs that interact with Git
    # commits.
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'gitaly.CommitService'

      # ListCommits lists all commits reachable via a set of references by doing a
      # graph walk. This deprecates FindAllCommits and FindCommits (except Follow
      # is not yet supported). Any unknown revisions will cause the RPC to fail.
      rpc :ListCommits, ::Gitaly::ListCommitsRequest, stream(::Gitaly::ListCommitsResponse)
      # ListAllCommits lists all commits present in the repository, including
      # those not reachable by any reference.
      rpc :ListAllCommits, ::Gitaly::ListAllCommitsRequest, stream(::Gitaly::ListAllCommitsResponse)
      # This comment is left unintentionally blank.
      rpc :CommitIsAncestor, ::Gitaly::CommitIsAncestorRequest, ::Gitaly::CommitIsAncestorResponse
      # This comment is left unintentionally blank.
      rpc :TreeEntry, ::Gitaly::TreeEntryRequest, stream(::Gitaly::TreeEntryResponse)
      # This comment is left unintentionally blank.
      rpc :CountCommits, ::Gitaly::CountCommitsRequest, ::Gitaly::CountCommitsResponse
      # This comment is left unintentionally blank.
      rpc :CountDivergingCommits, ::Gitaly::CountDivergingCommitsRequest, ::Gitaly::CountDivergingCommitsResponse
      # This comment is left unintentionally blank.
      rpc :GetTreeEntries, ::Gitaly::GetTreeEntriesRequest, stream(::Gitaly::GetTreeEntriesResponse)
      # This comment is left unintentionally blank.
      rpc :ListFiles, ::Gitaly::ListFilesRequest, stream(::Gitaly::ListFilesResponse)
      # This comment is left unintentionally blank.
      rpc :FindCommit, ::Gitaly::FindCommitRequest, ::Gitaly::FindCommitResponse
      # This comment is left unintentionally blank.
      rpc :CommitStats, ::Gitaly::CommitStatsRequest, ::Gitaly::CommitStatsResponse
      # Use a stream to paginate the result set
      rpc :FindAllCommits, ::Gitaly::FindAllCommitsRequest, stream(::Gitaly::FindAllCommitsResponse)
      # This comment is left unintentionally blank.
      rpc :FindCommits, ::Gitaly::FindCommitsRequest, stream(::Gitaly::FindCommitsResponse)
      # CommitLanguages detects the source code languages of the whole tree for a
      # given commit. Returns an error in case no languages could be detected.
      rpc :CommitLanguages, ::Gitaly::CommitLanguagesRequest, ::Gitaly::CommitLanguagesResponse
      # This comment is left unintentionally blank.
      rpc :RawBlame, ::Gitaly::RawBlameRequest, stream(::Gitaly::RawBlameResponse)
      # This comment is left unintentionally blank.
      rpc :LastCommitForPath, ::Gitaly::LastCommitForPathRequest, ::Gitaly::LastCommitForPathResponse
      # This comment is left unintentionally blank.
      rpc :ListLastCommitsForTree, ::Gitaly::ListLastCommitsForTreeRequest, stream(::Gitaly::ListLastCommitsForTreeResponse)
      # This comment is left unintentionally blank.
      rpc :CommitsByMessage, ::Gitaly::CommitsByMessageRequest, stream(::Gitaly::CommitsByMessageResponse)
      # This comment is left unintentionally blank.
      rpc :ListCommitsByOid, ::Gitaly::ListCommitsByOidRequest, stream(::Gitaly::ListCommitsByOidResponse)
      # This comment is left unintentionally blank.
      rpc :ListCommitsByRefName, ::Gitaly::ListCommitsByRefNameRequest, stream(::Gitaly::ListCommitsByRefNameResponse)
      # This comment is left unintentionally blank.
      rpc :FilterShasWithSignatures, stream(::Gitaly::FilterShasWithSignaturesRequest), stream(::Gitaly::FilterShasWithSignaturesResponse)
      # This comment is left unintentionally blank.
      rpc :GetCommitSignatures, ::Gitaly::GetCommitSignaturesRequest, stream(::Gitaly::GetCommitSignaturesResponse)
      # This comment is left unintentionally blank.
      rpc :GetCommitMessages, ::Gitaly::GetCommitMessagesRequest, stream(::Gitaly::GetCommitMessagesResponse)
      # CheckObjectsExist will check for the existence of revisions against a
      # repository. It returns two sets of data. An array containing the revisions
      # fromm the input that it found on the repository, and an array that contains all
      # revisions from the input it did not find on the repository.
      rpc :CheckObjectsExist, stream(::Gitaly::CheckObjectsExistRequest), stream(::Gitaly::CheckObjectsExistResponse)
    end

    Stub = Service.rpc_stub_class
  end
end
